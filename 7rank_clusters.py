'''
Rank the clusters containing h-top (h'-top) rules.
'''

import sys
import os.path 

def main():
	# Check number of args
	if len(sys.argv) < 3:
		print("\nUSAGE: python3.5 rank_clusters.py [htop_files.txt OR h'top_files.txt] [cluster_path] [prefix]\n")
		return

	# Collect args
	htop_file = sys.argv[1]		# Path of .txt containing all rules
	cluster_path = sys.argv[2]	# Path of files containing clusters
	prefix = sys.argv[3]		# Prefix of cluster files

	first_cluster = 0
	cluster_index = 0
	total_of_clusters = 0
	cluster_file = cluster_path + prefix + str(cluster_index) +'.out' # Pattern for a cluster file generated by ARKADE
	cluster = {}
	if os.path.isfile(cluster_file) is False:
		first_cluster = 1
		cluster_index = 1
		total_of_clusters = 0
		cluster_file = cluster_path + prefix + str(cluster_index) +'.out'
	# Load a vector for each cluster
	while os.path.isfile(cluster_file):
		with open(cluster_file) as cf:
			cluster_rules = set(line.strip() for line in cf)
			cluster[cluster_index] = cluster_rules
		cluster_index = cluster_index + 1
		cluster_file = cluster_path + prefix + str(cluster_index) +'.out' # Pattern for a cluster file generated by ARKADE

	# Load a vector for htop rules and rank clusters
	total_of_clusters = 1 + cluster_index
	rank = []
	htop_rules = []
	with open(htop_file) as hf:
		for line in hf:
			htop_rules.append(line.strip())
		for htop in htop_rules:
			htop_found = False
			for cluster_index in range(first_cluster,total_of_clusters):
				if htop_found: break
				for cluster_rule in cluster[cluster_index]:
					if cluster_rule == htop:
						print('FOUND HTOP in cluster ' + str(cluster_index))
						htop_found = True
						if cluster_index not in rank: rank.append(cluster_index)
						break
	print('Rank = ' + str(rank))
	return

if __name__ == '__main__':
	main()
